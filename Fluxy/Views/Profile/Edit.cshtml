@model Fluxy.ViewModels.User.UserMangementViewModel
@using Microsoft.AspNet.Identity;

@{
    var imgSrc = string.Empty;
    if (Model != null)
    {
        if (Model.DisplayPicture != null)
        {
            var base64 = Convert.ToBase64String(Model.DisplayPicture);
            imgSrc = String.Format("data:image/gif;base64,{0}", base64);
        }
    }
}

<div class="container">

    @using (Html.BeginForm("Edit", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>General Settings</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="form-check">
                    <label class="form-check-label">
                        @Html.RadioButtonFor(model => model.Gender, new { htmlAttributes = new { @class = "form-check-input", name = "optionsRadios" } })
                        Male
                    </label>

                    <label class="form-check-label">
                        @Html.RadioButtonFor(model => model.Gender, new { htmlAttributes = new { @class = "form-check-input", name = "optionsRadios" } })
                        Female
                    </label>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.About, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.About, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Hobbies, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Hobbies, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Hobbies, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.DisplayPicture, htmlAttributes: new { @class = "control-label col-md-2" })

                <div class="col-md-8">
                    <div class="row">
                        <div class="col-md-4">
                            <input type="file" class="form-control-file" name="fileBase" id="dpSelecter" value="fileBase" aria-describedby="fileHelp">
                            <small id="fileHelp" class="form-text text-muted">Select image file for your Display picture!</small>
                        </div>
                        <div class="col-md-4">
                            @if (!string.IsNullOrEmpty(imgSrc))
                            {
                                <img src="@imgSrc" data-src="holder.js/140x140" alt='Avatar' id="displayPicture" class="img-thumbnail  m-x-auto img-fluid img-responsive">
                            }
                            else
                            {
                                <img src="//placehold.it/150" data-src="holder.js/140x140" class="img-thumbnail m-x-auto img-fluid img-responsive" alt="avatar">
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-primary" />
                    @Html.ActionLink("Edit Privacy", "Privacy", routeValues: new { userId = User.Identity.GetUserId() }, htmlAttributes: new { @class = "btn btn-info" })
                    @Html.ActionLink("Cancel", "Index", routeValues: null, htmlAttributes: new { @class = "btn btn-link" })
                </div>
            </div>
        </div>
    }
</div>

<script>
    $('#dpSelecter').change(function () {
        readURL(this);
    })

    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('#displayPicture').attr('src', e.target.result);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }
</script>