@model Fluxy.ViewModels.Video.VideoAttributesViewModel

@{
    List<SelectListItem> categoyList = new List<SelectListItem>();
    foreach (var item in Model.Categories)
    {
        categoyList.Add(new SelectListItem
        {
            Text = item.Name,
            Value = item.Id
        });
    }

    List<SelectListItem> videoSettingsList = new List<SelectListItem>();
    foreach (var item in Model.VideoSettingses)
    {
        videoSettingsList.Add(new SelectListItem
        {
            Text = item.Name,
            Value = item.Id
        });
    }

    List<SelectListItem> languageList = new List<SelectListItem>();
    foreach (var item in Model.Languages)
    {
        languageList.Add(new SelectListItem
        {
            Text = item.Name,
            Value = item.Id
        });
    }
}
<div class="container">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.VideoId)
        <div class="form-horizontal">
            <h4>Post Video</h4>
            <hr />
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Title,htmlAttributes:new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ShortName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.ShortName, htmlAttributes:new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.ShortName, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Url,htmlAttributes: new { @class = "form-control" })
                    <small id="urlValidator">@Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Tags, htmlAttributes: new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, htmlAttributes:new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group">
                <label class="form-check-label">
                    @Html.CheckBoxFor(model => model.IsPublicVideo)
                    Public Video
                </label>
            </div>

            <div class="form-group">
                <label class="form-check-label">
                    @Html.CheckBoxFor(model => model.IsAdultContent)
                    Adult Content
                </label>
            </div>
            <div class="form-group">
                <label class="form-check-label">
                    @Html.CheckBoxFor(model => model.IsAllowFullScreen)
                    Full Screen
                </label>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Category</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.CategoryId, categoyList, htmlAttributes: new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Language</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.LanguageId, languageList, htmlAttributes: new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.LanguageId, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-md-2">Video Settings</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.VideoSettingsId, videoSettingsList, htmlAttributes: new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.VideoSettingsId, "", new { @class = "text-danger" })</small>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-primary" />
                    @Html.ActionLink("Cancel", "Index", routeValues: null, htmlAttributes: new { @class = "btn btn-link" })
                </div>
            </div>
        </div>
    }
</div>

<script>
    $('#Url').change(function () {
        var urlValue = $(this).val();
        if (urlValue) {
            if (urlValue.indexOf("youtube") >= 0) {
                $('#VideoId').val(Getvideoid(urlValue));
                return true
            } else {
                alert('Url should be from youtube.');
                return false;
            }
        }
    })

    function Getvideoid(videolink) {
        var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
        var match = videolink.match(regExp);

        if (match && match[7].length == 11) {
            return match[7];
        }
        regExp = "vimeo\\.com/(?:.*#|.*/videos/)?([0-9]+)";
        match = videolink.match(regExp);
        if (match) {
            var videoid = videolink.split('/')[videolink.split('/').length - 1];
            return videoid;
        }
    }
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
