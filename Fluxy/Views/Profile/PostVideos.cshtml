@model Fluxy.ViewModels.Video.VideoAttributesViewModel
@{
    ViewBag.Title = "Share your youtube Video";
    ViewBag.Description = "A free community for sharing youtube videos and content for all age group peoples| Share your youtube Video";

    List<SelectListItem> categoyList = new List<SelectListItem>();
    foreach (var item in Model.Categories)
    {
        categoyList.Add(new SelectListItem
        {
            Text = item.Name,
            Value = item.Id
        });
    }

    List<SelectListItem> videoSettingsList = new List<SelectListItem>();
    foreach (var item in Model.VideoSettingses)
    {
        videoSettingsList.Add(new SelectListItem
        {
            Text = item.Name,
            Value = item.Id
        });
    }

    List<SelectListItem> languageList = new List<SelectListItem>();
    foreach (var item in Model.Languages)
    {
        languageList.Add(new SelectListItem
        {
            Text = item.Name,
            Value = item.Id
        });
    }
}
<div class="container">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.VideoId)
        <div class="form-horizontal">
            <h4 class="wow bounceInLeft">Share Video</h4>
            <hr />
            <div class="form-group wow fadeInUp" data-wow-delay="0.2s">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Title, htmlAttributes: new { @class = "form-control", required = "required" })
                    <small>@Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="0.4s">
                @Html.LabelFor(model => model.ShortName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.ShortName, htmlAttributes: new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.ShortName, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="0.6s">
                @Html.Label("Paste your embed code", htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-10">
                    @Html.TextBox("embedCode", null, htmlAttributes: new { @class = "form-control", required = "required" })
                    <small>Paste url or embed code here</small>
                </div>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="0.8s">
                @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Url, htmlAttributes: new { @class = "form-control", @readonly="readonly", required = "required" })
                    <small>Url is auto generated from embed code. Do not modify.</small>
                    <small id="urlValidator">@Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="1s">
                @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Tags, htmlAttributes: new { @class = "form-control", required = "required" })
                    <small>@Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="1.2s">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, htmlAttributes: new { @class = "form-control textarea-editor", required = "required" })
                    <small>@Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="1.4s">
                <label class="form-check-label">
                    @Html.CheckBoxFor(model => model.IsPublicVideo)
                    Public Video
                </label>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="1.6s">
                <label class="form-check-label">
                    @Html.CheckBoxFor(model => model.IsAdultContent)
                    Adult Content
                </label>
            </div>
            <div class="form-group wow fadeInUp" data-wow-delay="1.8s">
                <label class="form-check-label">
                    @Html.CheckBoxFor(model => model.IsAllowFullScreen)
                    Full Screen
                </label>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="2s">
                <label class="control-label col-md-2">Category</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.CategoryId, categoyList, htmlAttributes: new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="2.2s">
                <label class="control-label col-md-2">Language</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.LanguageId, languageList, htmlAttributes: new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.LanguageId, "", new { @class = "text-danger" })</small>
                </div>
            </div>

            <div class="form-group wow fadeInUp" data-wow-delay="2.4s">
                <label class="control-label col-md-2">Video Settings</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.VideoSettingsId, videoSettingsList, htmlAttributes: new { @class = "form-control" })
                    <small>@Html.ValidationMessageFor(model => model.VideoSettingsId, "", new { @class = "text-danger" })</small>
                </div>
            </div>
            <div class="form-group wow fadeInUp" data-wow-delay="2.6s">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" onclick="return GetThumbunailUrl()" value="Create" class="btn btn-primary" />
                    @Html.ActionLink("Cancel", "Index", routeValues: null, htmlAttributes: new { @class = "btn btn-link" })
                </div>
            </div>
        </div>
    }
</div>
<script>
    $('#embedCode').change(function () {
        var url = YouTubeGetID($(this).val());
        var exactUrl = "https://www.youtube.com/embed/" + url;
        $('#VideoId').val(url);
        $('#Url').val(exactUrl);
    })

    function YouTubeGetID(url) {
        var ID = '';
        url = url.replace(/(>|<)/gi, '').split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/)/);
        if (url[2] !== undefined) {
            ID = url[2].split(/[^0-9a-z_\-]/i);
            ID = ID[0];
        }
        else {
            ID = url;
        }
        return ID;
    }
</script>
<script src="~/Scripts/Custom/ProfileVideos.min.js"></script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
